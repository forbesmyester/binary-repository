"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const stronger_typed_streams_1 = require("stronger-typed-streams");
var stronger_typed_streams_2 = require("stronger-typed-streams");
exports.Duplex = stronger_typed_streams_2.Duplex;
exports.Writable = stronger_typed_streams_2.Writable;
exports.Transform = stronger_typed_streams_2.Transform;
exports.Readable = stronger_typed_streams_2.Readable;
const streamdash_1 = require("streamdash");
class MemoryJoinStorage {
    constructor() {
        this.obs = [];
    }
    find(qry, next) {
        next(null, this.obs.filter((o) => {
            return ramda_1.equals(o, ramda_1.merge(o, qry));
        }));
    }
    add(t, next) {
        this.obs.push(t);
        next();
    }
}
exports.MemoryJoinStorage = MemoryJoinStorage;
class MemoryKVStore {
    constructor() {
        this.data = [];
    }
    get(k, next) {
        let r = this.data.filter(({ k: myK }) => {
            return ramda_1.equals(myK, k);
        }).map(({ v }) => v);
        if (r.length) {
            return next(null, r[0]);
        }
        return next(null, null);
    }
    add(k, v, next) {
        this.data = this.data.filter(({ k: myK }) => {
            return !ramda_1.equals(myK, k);
        });
        this.data.push({ k, v });
        next(null);
    }
}
exports.MemoryKVStore = MemoryKVStore;
var LeftOrRight;
(function (LeftOrRight) {
    LeftOrRight[LeftOrRight["Left"] = 1] = "Left";
    LeftOrRight[LeftOrRight["Right"] = 2] = "Right";
})(LeftOrRight = exports.LeftOrRight || (exports.LeftOrRight = {}));
class JoinTransform extends stronger_typed_streams_1.Transform {
    constructor(leftOrRight, lToQrys, rToQrys, opts) {
        super(opts);
        this.leftStorage = new MemoryJoinStorage();
        this.rightStorage = new MemoryJoinStorage();
        this.leftOrRight = leftOrRight;
        this.lToQrys = lToQrys;
        this.rToQrys = rToQrys;
    }
    doQry({ lQry, rQry }, next) {
        let r = {};
        let isDone = (a) => {
            return (Object.keys(a).length == 2);
        };
        let perhaps = (e) => {
            if (e) {
                return next(e);
            }
            if (isDone(r)) {
                next(null, r);
            }
        };
        this.leftStorage.find(lQry, (e, items) => {
            r.l = items;
            perhaps(e);
        });
        this.rightStorage.find(rQry, (e, items) => {
            r.r = items;
            perhaps(e);
        });
    }
    _transform(a, encoding, cb) {
        let qry = this.leftOrRight(a) == LeftOrRight.Left ?
            this.lToQrys(a) :
            this.rToQrys(a);
        let stored = (e) => {
            if (e) {
                return cb(e);
            } // TODO: Test Errors
            this.doQry(qry, (e, r) => {
                if (e) {
                    return cb(e);
                } // TODO: Test Errors
                this.push(r);
                cb();
            });
        };
        if (this.leftOrRight(a) == LeftOrRight.Left) {
            return this.leftStorage.add(a, stored);
        }
        this.rightStorage.add(a, stored);
    }
}
exports.JoinTransform = JoinTransform;
class InnerJoinTransform extends stronger_typed_streams_1.Transform {
    constructor(merge, indexer, opts) {
        super(opts);
        this.joinStorage = new MemoryKVStore();
        this.merge = merge;
        this.indexer = indexer;
    }
    _transform(a, encoding, cb) {
        let worker = ([l, r], cb) => {
            let v = this.merge(l, r);
            let k = this.indexer(v);
            this.joinStorage.get(k, (e, o) => {
                if (e) {
                    return cb(e);
                }
                if (o !== null) {
                    return cb(null, []);
                }
                this.joinStorage.add(k, v, (e) => {
                    cb(null, [v]);
                });
            });
        };
        let pairs = ramda_1.xprod(a.l, a.r);
        streamdash_1.asyncMap(worker, pairs, (e, os) => {
            if (e) {
                return cb(e);
            }
            if (os.length > 0) {
                ramda_1.flatten(os).map((o) => {
                    this.push(o);
                });
            }
            return cb();
        });
        // pairs.map(this.worker);
    }
}
exports.InnerJoinTransform = InnerJoinTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQXNEO0FBQ3RELG1FQUErRTtBQUMvRSxpRUFBK0U7QUFBdEUsMENBQUEsTUFBTSxDQUFBO0FBQUUsNENBQUEsUUFBUSxDQUFBO0FBQUUsNkNBQUEsU0FBUyxDQUFBO0FBQUUsNENBQUEsUUFBUSxDQUFBO0FBQzlDLDJDQUFzQztBQU90QztJQUFBO1FBRVksUUFBRyxHQUFRLEVBQUUsQ0FBQztJQVkxQixDQUFDO0lBVkcsSUFBSSxDQUFDLEdBQWUsRUFBRSxJQUFtQjtRQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsY0FBTSxDQUFDLENBQUMsRUFBRSxhQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBSSxFQUFFLElBQXdCO1FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQztDQUNKO0FBZEQsOENBY0M7QUFPRDtJQUFBO1FBRVksU0FBSSxHQUFtQixFQUFFLENBQUM7SUFpQnRDLENBQUM7SUFmRyxHQUFHLENBQUMsQ0FBSSxFQUFFLElBQXNCO1FBQzVCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFDO1lBQzlCLE1BQU0sQ0FBQyxjQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFD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