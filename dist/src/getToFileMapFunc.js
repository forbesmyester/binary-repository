"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Client_1 = require("./Client");
const streamdash_1 = require("streamdash");
const path_1 = require("path");
const mkdirp = require("mkdirp");
const fs_1 = require("fs");
const async_1 = require("async");
const ramda_1 = require("ramda");
const CmdRunner_1 = require("./CmdRunner");
function getBashRoot(d) {
    return path_1.join(path_1.dirname(path_1.dirname(d)), 'bash');
}
function _getDependenciesDecryptMapper(gpgKey, src, dst, isFirst, info) {
    return function (next) {
        let cmdSpawner = CmdRunner_1.CmdRunner.getCmdSpawner();
        let env = {
            OPT_SRC: src,
            OPT_DST: dst,
            OPT_GPG_KEY: gpgKey,
            OPT_IS_FIRST: isFirst ? "1" : "0",
            OPT_INFO: info
        };
        let cmdRunner = new CmdRunner_1.CmdRunner({ cmdSpawner: cmdSpawner }, Object.assign({}, process.env, env), ".", path_1.join(getBashRoot(__dirname), 'decrypt'), [], {});
        streamdash_1.streamDataCollector(cmdRunner).then((lines) => {
            next(null);
        }).catch((e) => {
            next(e);
        });
    };
}
function getDependencies() {
    return {
        utimes: fs_1.utimes,
        copyFile: fs_1.copyFile,
        rename: fs_1.rename,
        mkdirp,
        unlink: fs_1.unlink,
        decrypt: (gpgKey, srcs, dst, info, next) => {
            let acc = [];
            let tasks = ramda_1.reduce((acc, s) => {
                let r = _getDependenciesDecryptMapper(gpgKey, s, dst, acc.length == 0, info);
                return ramda_1.append(r, acc);
            }, acc, srcs);
            async_1.waterfall(tasks, (e) => { next(e); });
        }
    };
}
exports.getDependencies = getDependencies;
let myUnlink = (realUnlink, f, next) => {
    realUnlink(f, (e) => {
        if (e && (e.code == 'ENOENT')) {
            return next(null);
        }
        next(e);
    });
};
function getToFile({ copyFile, utimes, rename, mkdirp, unlink, decrypt }, configDir, rootDir, notificationHandler) {
    function notify(id, status) {
        if (notificationHandler) {
            notificationHandler(id, status);
        }
    }
    function generateDecryptedFilename(rec) {
        return path_1.join(configDir, 'tmp', rec.sha256 + '.ebak.dec');
    }
    function generateOriginalEncryptedFilename(commitId, rec) {
        return Client_1.default.constructFilepartLocalLocation(configDir, rec.gpgKey, commitId, rec);
    }
    ;
    function generateFinalFilename(rec) {
        return path_1.join(rootDir, rec.path);
    }
    function doUtimes(rec, next) {
        function convert(d) { return Math.floor(d.getTime() / 1000); }
        let mtime = convert(rec.modifiedDate), atime = convert(rec.modifiedDate);
        notify(rec.path, 'Copying');
        utimes(generateFinalFilename(rec), atime, mtime, (e) => {
            notify(rec.path, 'Copied');
            next(e, rec);
        });
    }
    function doDecrypt(commitId, rec, next) {
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        notify(rec.path, 'Decrypting');
        decrypt(rec.gpgKey, ramda_1.map(generateOriginalEncryptedFilename.bind(null, commitId), recs), generateDecryptedFilename(rec), rec.path, (e) => {
            if (e) {
                return next(e);
            }
            notify(rec.path, 'Decrypted');
            next(e, rec);
        });
    }
    function doCopy(rec, next) {
        copyFile(generateDecryptedFilename(rec), generateFinalFilename(rec), (e) => {
            if (e) {
                return next(e);
            }
            next(e, rec);
        });
    }
    function doMkdir(rec, next) {
        mkdirp(path_1.dirname(path_1.join(rootDir, rec.path)), e => {
            next(e, rec);
        });
    }
    function doUnlink(commitId, rec, next) {
        function doUnlinkOne(r, next) {
            myUnlink(unlink, generateOriginalEncryptedFilename(commitId, r), (e) => {
                notify(r.path, 'Finished');
                next(e, r);
            });
        }
        if (!rec.proceed) {
            return next(null, rec);
        }
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        async_1.mapLimit(recs, 10, doUnlinkOne, (e) => {
            myUnlink(unlink, generateDecryptedFilename(rec), (e) => {
                next(e, rec);
            });
        });
    }
    function process(commitId, rec, next) {
        let tasks = [
            (innerNext) => {
                if (!rec.proceed) {
                    return next(null, rec);
                }
                innerNext(null, rec);
            },
            doDecrypt.bind(null, commitId),
            doMkdir,
            doCopy,
            doUtimes,
        ];
        async_1.waterfall(tasks, next);
    }
    function finalize(a, next) {
        let oldFilename = path_1.join(configDir, 'remote-pending-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        let newFilename = path_1.join(configDir, 'remote-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        mkdirp(path_1.dirname(newFilename), (e) => {
            if (e) {
                return next(e);
            }
            rename(oldFilename, newFilename, (e) => {
                next(e, a);
            });
        });
    }
    return function (a, next) {
        let du = (rec, cb) => {
            doUnlink(a.commitId, rec, cb);
        };
        let p = (rec, cb) => {
            process(a.commitId, rec, cb);
        };
        async_1.mapLimit(a.record, 3, p, (e, r) => {
            if (e) {
                return next(e);
            }
            async_1.mapLimit(a.record, 3, du, (e2, r2) => {
                if (e2) {
                    return next(e2);
                }
                finalize(a, next);
            });
        });
    };
}
exports.default = getToFile;
//# sourceMappingURL=data:application/json;base64,