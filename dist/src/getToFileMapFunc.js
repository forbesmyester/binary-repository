"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Client_1 = require("./Client");
const streamdash_1 = require("streamdash");
const path_1 = require("path");
const mkdirp = require("mkdirp");
const fs_1 = require("fs");
const async_1 = require("async");
const ramda_1 = require("ramda");
const CmdRunner_1 = require("./CmdRunner");
function getBashRoot(d) {
    return path_1.join(path_1.dirname(path_1.dirname(d)), 'bash');
}
function _getDependenciesDecryptMapper(gpgKey, src, dst, isFirst) {
    return function (next) {
        let cmdSpawner = CmdRunner_1.CmdRunner.getCmdSpawner();
        let env = {
            OPT_SRC: src,
            OPT_DST: dst,
            OPT_GPG_KEY: gpgKey,
            OPT_IS_FIRST: isFirst ? "1" : "0"
        };
        let cmdRunner = new CmdRunner_1.CmdRunner({ cmdSpawner: cmdSpawner }, Object.assign(env, process.env), ".", path_1.join(getBashRoot(__dirname), 'decrypt'), [], {});
        let sdc = streamdash_1.streamDataCollector(cmdRunner).then((lines) => { next(null); }).catch(next);
    };
}
function getDependencies() {
    return {
        utimes: fs_1.utimes,
        copyFile: fs_1.copyFile,
        rename: fs_1.rename,
        mkdirp,
        unlink: fs_1.unlink,
        decrypt: (gpgKey, srcs, dst, next) => {
            let acc = [];
            let tasks = srcs.reduce((acc, s) => {
                let r = _getDependenciesDecryptMapper(gpgKey, s, dst, acc.length == 0);
                acc.push(r);
                return acc;
            }, acc);
            async_1.waterfall(tasks, (e) => { next(e); });
        }
    };
}
exports.getDependencies = getDependencies;
let myUnlink = (realUnlink, f, next) => {
    realUnlink(f, (e) => {
        if (e && (e.code == 'ENOENT')) {
            return next(null);
        }
        next(e);
    });
};
function getToFile({ copyFile, utimes, rename, mkdirp, unlink, decrypt }, configDir, rootDir) {
    function generateDecryptedFilename(rec) {
        return path_1.join(configDir, 'tmp', rec.sha256 + '.ebak.dec');
    }
    function generateOriginalEncryptedFilename(rec) {
        return path_1.join(configDir, 'remote-encrypted-filepart', Client_1.default.constructFilepartFilename(rec.sha256, rec.part, rec.filePartByteCountThreshold, rec.gpgKey));
    }
    ;
    function generateFinalFilename(rec) {
        return path_1.join(rootDir, rec.path);
    }
    function doUtimes(rec, next) {
        function convert(d) { return Math.floor(d.getTime() / 1000); }
        let mtime = convert(rec.modifiedDate), atime = convert(rec.modifiedDate);
        utimes(generateFinalFilename(rec), atime, mtime, (e) => {
            next(e, rec);
        });
    }
    function doDecrypt(rec, next) {
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        decrypt(rec.gpgKey, ramda_1.map(generateOriginalEncryptedFilename, recs), generateDecryptedFilename(rec), (e) => { next(e, rec); });
    }
    function doRename(rec, next) {
        copyFile(generateDecryptedFilename(rec), generateFinalFilename(rec), (e) => {
            next(e, rec);
        });
    }
    function doMkdir(rec, next) {
        mkdirp(path_1.dirname(path_1.join(rootDir, rec.path)), e => {
            next(e, rec);
        });
    }
    function doUnlinkOne(rec, next) {
        myUnlink(unlink, generateOriginalEncryptedFilename(rec), (e) => {
            next(e, rec);
        });
    }
    function doUnlink(rec, next) {
        if (!rec.proceed) {
            return next(null, rec);
        }
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        async_1.mapLimit(recs, 10, doUnlinkOne, (e) => {
            next(e, rec);
        });
    }
    function process(rec, next) {
        let tasks = [
            (innerNext) => {
                if (!rec.proceed) {
                    return next(null, rec);
                }
                innerNext(null, rec);
            },
            doDecrypt,
            doMkdir,
            doRename,
            doUtimes,
        ];
        async_1.waterfall(tasks, next);
    }
    function finalize(a, next) {
        let oldFilename = path_1.join(configDir, 'remote-pending-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        let newFilename = path_1.join(configDir, 'remote-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        mkdirp(path_1.dirname(newFilename), (e) => {
            if (e) {
                return next(e);
            }
            rename(oldFilename, newFilename, (e) => {
                next(e, a);
            });
        });
    }
    return function (a, next) {
        async_1.mapLimit(a.record, 3, process, (e, r) => {
            if (e) {
                return next(e);
            }
            async_1.mapLimit(a.record, 3, doUnlink, (e2, r2) => {
                if (e2) {
                    return next(e2);
                }
                finalize(a, next);
            });
        });
    };
}
exports.default = getToFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VG9GaWxlTWFwRnVuYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXRUb0ZpbGVNYXBGdW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQThCO0FBRTlCLDJDQUFpRDtBQUNqRCwrQkFBcUM7QUFDckMsaUNBQWlDO0FBQ2pDLDJCQUFzRDtBQUN0RCxpQ0FBMkQ7QUFDM0QsaUNBQTBDO0FBQzFDLDJDQUEyRTtBQWMzRSxxQkFBcUIsQ0FBbUI7SUFDcEMsTUFBTSxDQUFDLFdBQUksQ0FBQyxjQUFPLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELHVDQUF1QyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPO0lBQzVELE1BQU0sQ0FBQyxVQUFTLElBQUk7UUFDaEIsSUFBSSxVQUFVLEdBQWUscUJBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2RCxJQUFJLEdBQUcsR0FBMEI7WUFDN0IsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUUsR0FBRztZQUNaLFdBQVcsRUFBRSxNQUFNO1lBQ25CLFlBQVksRUFBRSxPQUFPLEdBQUcsR0FBRyxHQUFFLEdBQUc7U0FDbkMsQ0FBQztRQUNGLElBQUksU0FBUyxHQUFHLElBQUkscUJBQVMsQ0FDekIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQ1QsR0FBRyxFQUNtQixPQUFPLENBQUMsR0FBRyxDQUNwQyxFQUNELEdBQUcsRUFDSCxXQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUN2QyxFQUFFLEVBQ0YsRUFBRSxDQUNMLENBQUM7UUFDRixJQUFJLEdBQUcsR0FBRyxnQ0FBbUIsQ0FDekIsU0FBUyxDQUNaLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMs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