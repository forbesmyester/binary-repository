"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Client_1 = require("./Client");
const streamdash_1 = require("streamdash");
const path_1 = require("path");
const mkdirp = require("mkdirp");
const fs_1 = require("fs");
const async_1 = require("async");
const ramda_1 = require("ramda");
const CmdRunner_1 = require("./CmdRunner");
function getBashRoot(d) {
    return path_1.join(path_1.dirname(path_1.dirname(d)), 'bash');
}
function _getDependenciesDecryptMapper(gpgKey, src, dst, isFirst, info) {
    return function (next) {
        let cmdSpawner = CmdRunner_1.CmdRunner.getCmdSpawner();
        let env = {
            OPT_SRC: src,
            OPT_DST: dst,
            OPT_GPG_KEY: gpgKey,
            OPT_IS_FIRST: isFirst ? "1" : "0",
            OPT_INFO: info
        };
        let cmdRunner = new CmdRunner_1.CmdRunner({ cmdSpawner: cmdSpawner }, Object.assign({}, process.env, env), ".", path_1.join(getBashRoot(__dirname), 'decrypt'), [], {});
        let sdc = streamdash_1.streamDataCollector(cmdRunner).then((lines) => {
            next(null);
        }).catch((e) => {
            next(e);
        });
    };
}
function getDependencies() {
    return {
        utimes: fs_1.utimes,
        copyFile: fs_1.copyFile,
        rename: fs_1.rename,
        mkdirp,
        unlink: fs_1.unlink,
        decrypt: (gpgKey, srcs, dst, info, next) => {
            let acc = [];
            let tasks = ramda_1.reduce((acc, s) => {
                let r = _getDependenciesDecryptMapper(gpgKey, s, dst, acc.length == 0, info);
                return ramda_1.append(r, acc);
            }, acc, srcs);
            async_1.waterfall(tasks, (e) => { next(e); });
        }
    };
}
exports.getDependencies = getDependencies;
let myUnlink = (realUnlink, f, next) => {
    realUnlink(f, (e) => {
        if (e && (e.code == 'ENOENT')) {
            return next(null);
        }
        next(e);
    });
};
function getToFile({ copyFile, utimes, rename, mkdirp, unlink, decrypt }, configDir, rootDir, notificationHandler) {
    function notify(id, status) {
        if (notificationHandler) {
            notificationHandler(id, status);
        }
    }
    function generateDecryptedFilename(rec) {
        return path_1.join(configDir, 'tmp', rec.sha256 + '.ebak.dec');
    }
    function generateOriginalEncryptedFilename(rec) {
        return path_1.join(configDir, 'remote-encrypted-filepart', Client_1.default.constructFilepartFilename(rec.sha256, rec.part, rec.filePartByteCountThreshold, rec.gpgKey));
    }
    ;
    function generateFinalFilename(rec) {
        return path_1.join(rootDir, rec.path);
    }
    function doUtimes(rec, next) {
        function convert(d) { return Math.floor(d.getTime() / 1000); }
        let mtime = convert(rec.modifiedDate), atime = convert(rec.modifiedDate);
        notify(rec.path, 'Copying');
        utimes(generateFinalFilename(rec), atime, mtime, (e) => {
            notify(rec.path, 'Copied');
            next(e, rec);
        });
    }
    function doDecrypt(rec, next) {
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        notify(rec.path, 'Decrypting');
        decrypt(rec.gpgKey, ramda_1.map(generateOriginalEncryptedFilename, recs), generateDecryptedFilename(rec), rec.path, (e) => {
            if (e) {
                return next(e);
            }
            notify(rec.path, 'Decrypted');
            next(e, rec);
        });
    }
    function doCopy(rec, next) {
        copyFile(generateDecryptedFilename(rec), generateFinalFilename(rec), (e) => {
            if (e) {
                return next(e);
            }
            next(e, rec);
        });
    }
    function doMkdir(rec, next) {
        mkdirp(path_1.dirname(path_1.join(rootDir, rec.path)), e => {
            next(e, rec);
        });
    }
    function doUnlinkOne(rec, next) {
        myUnlink(unlink, generateOriginalEncryptedFilename(rec), (e) => {
            notify(rec.path, 'Finished');
            next(e, rec);
        });
    }
    function doUnlink(rec, next) {
        if (!rec.proceed) {
            return next(null, rec);
        }
        let recs = ramda_1.map(part0 => {
            return ramda_1.assoc('part', [part0, rec.part[1]], rec);
        }, ramda_1.range(1, rec.part[1] + 1));
        async_1.mapLimit(recs, 10, doUnlinkOne, (e) => {
            myUnlink(unlink, generateDecryptedFilename(rec), (e) => {
                next(e, rec);
            });
        });
    }
    function process(rec, next) {
        let tasks = [
            (innerNext) => {
                if (!rec.proceed) {
                    return next(null, rec);
                }
                innerNext(null, rec);
            },
            doDecrypt,
            doMkdir,
            doCopy,
            doUtimes,
        ];
        async_1.waterfall(tasks, next);
    }
    function finalize(a, next) {
        let oldFilename = path_1.join(configDir, 'remote-pending-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        let newFilename = path_1.join(configDir, 'remote-commit', Client_1.default.constructCommitFilename(a.commitId, a.gpgKey, a.clientId));
        mkdirp(path_1.dirname(newFilename), (e) => {
            if (e) {
                return next(e);
            }
            rename(oldFilename, newFilename, (e) => {
                next(e, a);
            });
        });
    }
    return function (a, next) {
        async_1.mapLimit(a.record, 3, process, (e, r) => {
            if (e) {
                return next(e);
            }
            async_1.mapLimit(a.record, 3, doUnlink, (e2, r2) => {
                if (e2) {
                    return next(e2);
                }
                finalize(a, next);
            });
        });
    };
}
exports.default = getToFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VG9GaWxlTWFwRnVuYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXRUb0ZpbGVNYXBGdW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQThCO0FBRTlCLDJDQUFpRDtBQUNqRCwrQkFBcUM7QUFDckMsaUNBQWlDO0FBQ2pDLDJCQUFzRDtBQUN0RCxpQ0FBMkQ7QUFDM0QsaUNBQTBEO0FBQzFELDJDQUEyRTtBQWUzRSxxQkFBcUIsQ0FBbUI7SUFDcEMsTUFBTSxDQUFDLFdBQUksQ0FBQyxjQUFPLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELHVDQUF1QyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSTtJQUNsRSxNQUFNLENBQUMsVUFBUyxJQUFJO1FBQ2hCLElBQUksVUFBVSxHQUFlLHFCQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkQsSUFBSSxHQUFHLEdBQTBCO1lBQzdCLE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFLEdBQUc7WUFDWixXQUFXLEVBQUUsTUFBTTtZQUNuQixZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUEsQ0FBQyxDQUFDLEdBQUc7WUFDaEMsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQztRQUNGLElBQUksU0FBUyxHQUFHLElBQUkscUJBQVMsQ0FDekIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQ1QsRUFBRSxFQUNvQixPQUFPLENBQUMsR0FBRyxFQUNqQyxHQUFHLENBQ04sRUFDRCxHQUFHLEVBQ0gsV0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFDdkMsRUFBRSxFQUNGLEVBQUUsQ0FDTCxDQUFDO1FBQ0YsSUFBSSxHQUFHLEdBQUcsZ0NBQW1CLENBQ3pC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