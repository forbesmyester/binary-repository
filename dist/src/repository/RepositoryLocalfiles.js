"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const Client_1 = require("../Client");
const path_1 = require("path");
function constructObject(gpgKey, a) {
    return Client_1.default.constructFilepartFilename(a.sha256, a.part, a.filePartByteCountThreshold, gpgKey);
}
function copyFile(tmpDir, src, dest, next) {
    let nexted = false;
    let tmpFile = path_1.join(tmpDir, dest.replace(/[^a-zA-Z0-9]/g, '_'));
    let read = fs_1.createReadStream(src);
    let write = fs_1.createWriteStream(tmpFile);
    read.on('error', (e) => { nexted ? null : next(e); nexted = true; });
    write.on('error', (e) => { nexted ? null : next(e); nexted = true; });
    write.on('close', (e) => {
        if (e) {
            return next(e);
        }
        if (nexted) {
            return;
        }
        fs_1.rename(tmpFile, dest, next);
    });
    read.pipe(write);
}
let RepositoryLocalfiles = {
    constructFilepartS3Location: (s3Bucket, gpgKey, rec) => {
        return [s3Bucket, constructObject(gpgKey, rec)];
    },
    exists: (loc, next) => {
        let absoluteFilepath = path_1.join(loc[0], loc[1]);
        fs_1.stat(absoluteFilepath, (e) => {
            if (e && (e.code == 'ENOENT')) {
                return next(null, false);
            }
            if (e) {
                return next(e);
            }
            next(null, true);
        });
    },
    downloadSize: (loc, next) => {
        let absoluteFilepath = path_1.join(loc[0], loc[1]);
        fs_1.stat(absoluteFilepath, (e, s) => {
            if (e) {
                return next(e);
            }
            next(null, s.size);
        });
    },
    download: (tmpDir, loc, downloadTo, next) => {
        copyFile(tmpDir, path_1.join(loc[0], loc[1]), downloadTo, next);
    },
    upload: (tmpDir, src, loc, next) => {
        let nexted = false;
        let tmp = path_1.join(tmpDir, src.replace(/[^a-zA-Z0-9]/, '_'));
        let read = fs_1.createReadStream(src);
        let write = fs_1.createWriteStream(tmp);
        read.on('error', (e) => { nexted ? null : next(e); nexted = true; });
        write.on('error', (e) => { nexted ? null : next(e); nexted = true; });
        write.on('close', (e) => {
            if (e) {
                return next(e);
            }
            if (nexted) {
                return;
            }
            fs_1.rename(tmp, path_1.join(loc[0], loc[1]), next);
        });
        read.pipe(write);
    }
};
exports.default = RepositoryLocalfiles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeUxvY2FsZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVwb3NpdG9yeS9SZXBvc2l0b3J5TG9jYWxmaWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJCQUF1RTtBQUN2RSxzQ0FBK0I7QUFJL0IsK0JBQTRCO0FBRTVCLHlCQUF5QixNQUFjLEVBQUUsQ0FBdUM7SUFDNUUsTUFBTSxDQUFDLGdCQUFNLENBQUMseUJBQXlCLENBQ25DLENBQUMsQ0FBQyxNQUFNLEVBQ1IsQ0FBQyxDQUFDLElBQUksRUFDTixDQUFDLENBQUMsMEJBQTBCLEVBQzVCLE1BQU0sQ0FDVCxDQUFDO0FBQ04sQ0FBQztBQUVELGtCQUFrQixNQUE2QixFQUFFLEdBQXFCLEVBQUUsSUFBc0IsRUFBRSxJQUFvQjtJQUM1RyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsSUFBSSxPQUFPLEdBQUcsV0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQUksSUFBSSxHQUFHLHFCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLHNCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUFDLENBQUM7UUFDdkIsV0FBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxJQUFJLG9CQUFvQixHQUF1QjtJQUUzQywyQkFBMkIsRUFBRSxDQUFDLFFBQXNCLEVBQUUsTUFBYyxFQUFFLEdBQXlDO1FBQzNHLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELE1BQU0sRUFBRSxDQUFDLEdBQWUsRUFBRSxJQUF1QjtRQUM3QyxJQUFJLGdCQUFnQixHQUFxQixXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlELFNBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7WUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzdCLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsWUFBWSxFQUFFLENBQUMsR0FBZSxFQUFFLElBQXlCO1FBQ3JELElBQUksZ0JBQWdCLEdBQXFCLFdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsU0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxRQUFRLEVBQUUsQ0FBQyxNQUE2QixFQUFFLEdBQWUsRUFBRSxVQUE0QixFQUFFLElBQW9CO1FBQ3pHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELE1BQU0sRUFBRSxDQUFDLE1BQTZCLEVBQUUsR0FBcUIsRUFBRSxHQUFlLEVBQUUsSUFBb0I7UUFDaEcsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksR0FBRyxHQUFHLFdBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLElBQUksR0FBRyxxQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFJLEtBQUssR0FBRyxzQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQztZQUFDLENBQUM7WUFDdkIsV0FBTSxDQUFDLEdBQUcsRUFBRSxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDO0NBRUosQ0FBQztBQUVGLGtCQUFlLG9CQUFvQixDQUFDIn0=