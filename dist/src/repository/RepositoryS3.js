"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const aws_sdk_1 = require("aws-sdk");
const Client_1 = require("../Client");
const NodeStream = require("stream");
function constructObject(gpgKey, a) {
    return Client_1.default.constructFilepartFilename(a.sha256, a.part, a.filePartByteCountThreshold, gpgKey);
}
let s3 = new aws_sdk_1.S3();
let RepositoryS3 = {
    constructFilepartS3Location: (s3Bucket, gpgKey, rec) => {
        return [s3Bucket, constructObject(gpgKey, rec)];
    },
    exists: (loc, next) => {
        let params = { Bucket: loc[0], Key: loc[1] };
        s3.headObject(params, (e, data) => {
            if (e) {
                if (e.code == 'NotFound') {
                    return next(null, false);
                }
                return next(e);
            }
            if (data && (data.ContentLength > 0)) {
                return next(null, true);
            }
            next(null, false);
        });
    },
    downloadSize: (loc, next) => {
        let params = { Bucket: loc[0], Prefix: loc[1] };
        s3.listObjects(params, (err, data) => {
            if (err) {
                return next(err);
            }
            if (!data.Contents || data.Contents.length == 0) {
                let o = JSON.stringify(loc);
                throw new Error(`Expected S3 Object ${o} did not exist`);
            }
            next(null, data.Contents[0].Size);
        });
        // let absoluteFilepath: AbsoluteFilePath = join(loc[0], loc[1]);
        // stat(absoluteFilepath, (e, s) => {
        //     if (e) { return next(e); }
        //     next(null, s.size);
        // });
    },
    download: (tmpDir, loc, downloadTo, next) => {
        let params = { Bucket: loc[0], Key: loc[1] };
        s3.getObject(params, (err, metaData) => {
            if (err) {
                return next(err);
            }
            let nexted = false;
            let tmp = path_1.join(tmpDir, loc[1]);
            let write = fs_1.createWriteStream(tmp);
            let read = new NodeStream.Duplex();
            read.push(metaData.Body);
            read.push(null);
            write.on('error', (e) => { nexted ? null : next(e); nexted = true; });
            write.on('close', (e) => {
                if (e) {
                    return next(e);
                }
                if (nexted) {
                    return;
                }
                fs_1.rename(tmp, downloadTo, next);
            });
            read.pipe(write);
        });
    },
    upload: (tmpDir, src, loc, next) => {
        s3.upload({ Bucket: loc[0], Key: loc[1], Body: fs_1.createReadStream(src) }, (e) => {
            next(e);
        });
    }
};
exports.default = RepositoryS3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeVMzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlcG9zaXRvcnkvUmVwb3NpdG9yeVMzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkJBQXVFO0FBR3ZFLCtCQUE0QjtBQUM1QixxQ0FBNkI7QUFFN0Isc0NBQStCO0FBQy9CLHFDQUFxQztBQUdyQyx5QkFBeUIsTUFBYyxFQUFFLENBQXVDO0lBQzVFLE1BQU0sQ0FBQyxnQkFBTSxDQUFDLHlCQUF5QixDQUNuQyxDQUFDLENBQUMsTUFBTSxFQUNSLENBQUMsQ0FBQyxJQUFJLEVBQ04sQ0FBQyxDQUFDLDBCQUEwQixFQUM1QixNQUFNLENBQ1QsQ0FBQztBQUNOLENBQUM7QUFFRCxJQUFJLEVBQUUsR0FBRyxJQUFJLFlBQUUsRUFBRSxDQUFDO0FBRWxCLElBQUksWUFBWSxHQUF1QjtJQUVuQywyQkFBMkIsRUFBRSxDQUFDLFFBQXNCLEVBQUUsTUFBYyxFQUFFLEdBQXlDLEVBQWMsRUFBRTtRQUMzSCxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxNQUFNLEVBQUUsQ0FBQyxHQUFlLEVBQUUsSUFBdUIsRUFBRSxFQUFFO1FBQ2pELElBQUksTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMs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