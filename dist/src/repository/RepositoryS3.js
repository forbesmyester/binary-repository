"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const aws_sdk_1 = require("aws-sdk");
const Client_1 = require("../Client");
const NodeStream = require("stream");
function constructObject(gpgKey, a) {
    return Client_1.default.constructFilepartFilename(a.sha256, a.part, a.filePartByteCountThreshold, gpgKey);
}
let s3 = new aws_sdk_1.S3();
let RepositoryS3 = {
    constructFilepartS3Location: (s3Bucket, gpgKey, rec) => {
        return [s3Bucket, constructObject(gpgKey, rec)];
    },
    exists: (loc, next) => {
        let params = { Bucket: loc[0], Key: loc[1] };
        s3.headObject(params, (e, data) => {
            if (e) {
                if (e.code == 'NotFound') {
                    return next(null, false);
                }
                return next(e);
            }
            if (data && (data.ContentLength > 0)) {
                return next(null, true);
            }
            next(null, false);
        });
    },
    downloadSize: (loc, next) => {
        let params = { Bucket: loc[0], Prefix: loc[1] };
        s3.listObjects(params, (err, data) => {
            if (err) {
                return next(err);
            }
            if (!data.Contents || data.Contents.length == 0) {
                let o = JSON.stringify(loc);
                throw new Error(`Expected S3 Object ${o} did not exist`);
            }
            next(null, data.Contents[0].Size);
        });
        // let absoluteFilepath: AbsoluteFilePath = join(loc[0], loc[1]);
        // stat(absoluteFilepath, (e, s) => {
        //     if (e) { return next(e); }
        //     next(null, s.size);
        // });
    },
    download: (tmpDir, loc, downloadTo, next) => {
        let params = { Bucket: loc[0], Key: loc[1] };
        s3.getObject(params, (err, metaData) => {
            if (err) {
                return next(err);
            }
            let nexted = false;
            let tmp = path_1.join(tmpDir, loc[1]);
            let write = fs_1.createWriteStream(tmp);
            let read = new NodeStream.Duplex();
            read.push(metaData.Body);
            read.push(null);
            write.on('error', (e) => { nexted ? null : next(e); nexted = true; });
            write.on('close', (e) => {
                if (e) {
                    return next(e);
                }
                if (nexted) {
                    return;
                }
                fs_1.rename(tmp, downloadTo, next);
            });
            read.pipe(write);
        });
    },
    upload: (tmpDir, src, loc, next) => {
        s3.upload({ Bucket: loc[0], Key: loc[1], Body: fs_1.createReadStream(src) }, (e) => {
            next(e);
        });
    }
};
exports.default = RepositoryS3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeVMzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlcG9zaXRvcnkvUmVwb3NpdG9yeVMzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkJBQXVFO0FBR3ZFLCtCQUE0QjtBQUM1QixxQ0FBNkI7QUFFN0Isc0NBQStCO0FBQy9CLHFDQUFxQztBQUdyQyx5QkFBeUIsTUFBYyxFQUFFLENBQXVDO0lBQzVFLE1BQU0sQ0FBQyxnQkFBTSxDQUFDLHlCQUF5QixDQUNuQyxDQUFDLENBQUMsTUFBTSxFQUNSLENBQUMsQ0FBQyxJQUFJLEVBQ04sQ0FBQyxDQUFDLDBCQUEwQixFQUM1QixNQUFNLENBQ1QsQ0FBQztBQUNOLENBQUM7QUFFRCxJQUFJLEVBQUUsR0FBRyxJQUFJLFlBQUUsRUFBRSxDQUFDO0FBRWxCLElBQUksWUFBWSxHQUF1QjtJQUVuQywyQkFBMkIsRUFBRSxDQUFDLFFBQXNCLEVBQUUsTUFBYyxFQUFFLEdBQXlDO1FBQzNHLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELE1BQU0sRUFBRSxDQUFDLEdBQWUsRUFBRSxJQUF1QjtRQUM3QyxJQUFJLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzdDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUk7WUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM3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