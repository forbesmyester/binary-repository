"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const Sha256FileToSha256FilePart_1 = require("../src/Sha256FileToSha256FilePart");
const streamdash_1 = require("streamdash");
ava_1.default("Can calculate parts", (tst) => {
    tst.deepEqual(Sha256FileToSha256FilePart_1.Sha256FileToSha256FilePart.parts(0, 2), []);
    tst.deepEqual(Sha256FileToSha256FilePart_1.Sha256FileToSha256FilePart.parts(9, 2), [[0, 2, false, [1, 5], 2], [2, 2, false, [2, 5], 2], [4, 2, false, [3, 5], 2], [6, 2, false, [4, 5], 2], [8, -1, true, [5, 5], 2]]);
    tst.deepEqual(Sha256FileToSha256FilePart_1.Sha256FileToSha256FilePart.parts(1024, 1024), [[0, -1, true, [1, 1], 1024]]);
    tst.deepEqual(Sha256FileToSha256FilePart_1.Sha256FileToSha256FilePart.parts(1066, 1024), [[0, 1024, false, [1, 2], 1024], [1024, -1, true, [2, 2], 1024]]);
});
ava_1.default("Can break parts", (tst) => {
    let modifiedDate = new Date("2017-06-19T06:20:05.168Z");
    let shaFiles = new streamdash_1.ArrayReadable([{
            sha256: "def8c702e06f7f6ac6576e0d4bbd830303aaa7d6857ee6c81c6d6a1b0a6c3bdf",
            fileByteCount: 2048,
            modifiedDate,
            path: "//error_command"
        }]);
    let parter = new Sha256FileToSha256FilePart_1.Sha256FileToSha256FilePart('./test/data', 1024, { objectMode: true });
    shaFiles.pipe(parter);
    return streamdash_1.streamDataCollector(parter)
        .then((parts) => {
        let expected = [
            {
                sha256: "def8c702e06f7f6ac6576e0d4bbd830303aaa7d6857ee6c81c6d6a1b0a6c3bdf",
                fileByteCount: 2048,
                filePartByteCountThreshold: 1024,
                length: 1024,
                part: [1, 2],
                offset: 0,
                modifiedDate,
                path: "//error_command",
                isLast: false
            },
            {
                sha256: "def8c702e06f7f6ac6576e0d4bbd830303aaa7d6857ee6c81c6d6a1b0a6c3bdf",
                fileByteCount: 2048,
                filePartByteCountThreshold: 1024,
                length: -1,
                part: [2, 2],
                offset: 1024,
                modifiedDate,
                path: "//error_command",
                isLast: true
            }
        ];
        tst.deepEqual(parts, expected);
    })
        .catch(e => {
        tst.fail(e.message);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hhMjU2RmlsZVRvU2hhMjU2RmlsZVBhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L1NoYTI1NkZpbGVUb1NoYTI1NkZpbGVQYXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQXVCO0FBQ3ZCLGtGQUErRTtBQUMvRSwyQ0FBZ0U7QUFHaEUsYUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsR0FBRztJQUM1QixHQUFHLENBQUMsU0FBUyxDQUNULHVEQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3RDLEVBQUUsQ0FDTCxDQUFDO0lBQ0YsR0FBRyxDQUFDLFNBQVMsQ0FDVCx1REFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN0QyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3JJLENBQUM7SUFDRixHQUFHLENBQUMsU0FBUyxDQUNULHVEQUEwQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQzVDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQ2hDLENBQUM7SUFDRixHQUFHLENBQUMsU0FBUyxDQUNULHVEQUEwQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQzVDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FDbkUsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsYUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsR0FBRztJQUV4QixJQUFJLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBRXhELElBQUksUUFBUSxHQUFHLElBQUksMEJBQWEsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sRUFBRSxrRUFBa0U7WUFDMUUsYUFBYSxFQUFFLElBQUk7WUFDbkIsWUFBWTtZQUNaLElBQUksRUFBRSxpQkFBaUI7U0FDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSixJQUFJLE1BQU0sR0FBRyxJQUFJLHVEQUEwQixDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUNyRixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRCLE1BQU0sQ0FBQyxnQ0FBbUIsQ0FBaUIsTUFBTSxDQUFDO1NBQzdDLElBQUksQ0FBQyxDQUFDLEtBQUs7UUFDUixJQUFJLFFBQVEsR0FBcUI7WUFDN0I7Z0JBQ0ksTUFBTSxFQUFFLGtFQUFrRTtnQkFDMUUsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLDBCQUEwQixFQUFFLElBQUk7Z0JBQ2hDLE1BQU0sRUFBRSxJQUFJO2dCQUNaLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ1osTUFBTSxFQUFFLENBQUM7Z0JBQ1QsWUFBWTtnQkFDWixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixNQUFNLEVBQUUsS0FBSzthQUNoQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxrRUFBa0U7Z0JBQzFFLGFBQWEsRUFBRSxJQUFJO2dCQUNuQiwwQkFBMEIsRUFBRSxJQUFJO2dCQUNoQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2dCQUNWLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ1osTUFBTSxFQUFFLElBQUk7Z0JBQ1osWUFBWTtnQkFDWixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixNQUFNLEVBQUUsSUFBSTthQUNmO1NBQ0osQ0FBQztRQUVGLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztTQUNELEtBQUssQ0FBQyxDQUFDO1FBQ0osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFHWCxDQUFDLENBQUMsQ0FBQyJ9