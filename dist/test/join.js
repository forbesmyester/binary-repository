"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const join_1 = require("../src/join");
const streamdash_1 = require("streamdash");
class Outer extends streamdash_1.Writable {
    constructor() {
        super(...arguments);
        this.out = [];
    }
    _write(thing, encoding, cb) {
        this.out.push(thing);
        cb();
    }
    get() {
        return this.out;
    }
}
function aReduce(f, acc, xs, next) {
    let myXs = xs.concat([]);
    let initiator = () => {
        if (myXs.length == 0) {
            return next(null, acc);
        }
        f(acc, myXs.shift(), (err, newAcc) => {
            if (err) {
                return next(err);
            }
            acc = newAcc;
            initiator();
        });
    };
    initiator();
}
ava_1.default.cb('Can find things in storage', function (tst) {
    let worker = (acc, x, next) => {
        acc.add(x, (e) => {
            next(null, acc);
        });
    };
    let items = [
        { name: "A", type: "Letter" },
        { name: "B", type: "Letter" },
        { name: "C", type: "Letter" }
    ];
    let initial = new join_1.MemoryJoinStorage();
    aReduce(worker, initial, items, (e, storage) => {
        storage.find({ name: "B" }, (e, vs) => {
            tst.deepEqual(vs, [{ name: "B", type: "Letter" }]);
            tst.end();
        });
    });
});
const CUSTOMER = "customer";
function getJoin() {
    let input = [
        { customerId: "A", type: "order", item: "Shoe" },
        { type: "customer", id: "A", name: "Jack" },
        { customerId: "B", type: "order", item: "Ruler" },
        { type: "customer", id: "B", name: "Jane" },
        { customerId: "A", type: "order", item: "Car" },
    ];
    let src = new streamdash_1.ArrayReadable(input);
    let isLeft = (t) => {
        if (t.type == CUSTOMER) {
            return join_1.LeftOrRight.Left;
        }
        return join_1.LeftOrRight.Right;
    };
    let qb = (t) => {
        if (t.type == CUSTOMER) {
            return {
                lQry: { id: t.id },
                rQry: { customerId: t.id }
            };
        }
        return {
            lQry: { id: t.customerId },
            rQry: { customerId: t.customerId }
        };
    };
    let jt = new join_1.JoinTransform(isLeft, qb, qb, { objectMode: true });
    src.pipe(jt);
    return jt;
}
ava_1.default.cb('Can join', function (tst) {
    let jt = getJoin();
    let dst = new Outer({ objectMode: true });
    let expected = [
        { l: [], r: [{ customerId: "A", type: "order", item: "Shoe" }] },
        {
            l: [{ type: "customer", id: "A", name: "Jack" }],
            r: [{ customerId: "A", type: "order", item: "Shoe" }]
        },
        { l: [], r: [{ customerId: "B", type: "order", item: "Ruler" }] },
        {
            l: [{ type: "customer", id: "B", name: "Jane" }],
            r: [{ customerId: "B", type: "order", item: "Ruler" }]
        },
        {
            l: [{ type: "customer", id: "A", name: "Jack" }],
            r: [
                { customerId: "A", type: "order", item: "Shoe" },
                { customerId: "A", type: "order", item: "Car" }
            ]
        }
    ];
    jt.pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), expected);
        tst.end();
    });
});
ava_1.default.cb('Can get as inner join', function (tst) {
    let jt = getJoin();
    let expected = [
        { customerId: "A", name: "Jack", item: "Shoe" },
        { customerId: "B", name: "Jane", item: "Ruler" },
        { customerId: "A", name: "Jack", item: "Car" }
    ];
    let makeOrder = new join_1.InnerJoinTransform((l, r) => {
        return { customerId: l.id, name: l.name, item: r.item };
    }, (o) => `${o.customerId}:${o.item}`, { objectMode: true });
    let dst = new Outer({ objectMode: true });
    jt.pipe(makeOrder).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), expected);
        tst.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUF1QjtBQUV2QixzQ0FBc0k7QUFDdEksMkNBQXFEO0FBS3JELFdBQWUsU0FBUSxxQkFBVztJQUFsQzs7UUFDWSxRQUFHLEdBQVEsRUFBRSxDQUFDO0lBUTFCLENBQUM7SUFQRyxNQUFNLENBQUMsS0FBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUNELEdBQUc7UUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0NBQ0o7QUFFRCxpQkFBdUIsQ0FBMkMsRUFBRSxHQUFNLEVBQUUsRUFBTyxFQUFFLElBQWlCO0lBQ2xHLElBQUksSUFBSSxHQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsSUFBSSxTQUFTLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsR0FBRyxFQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNwQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQzlCLEdBQUcsR0FBTSxNQUFNLENBQUM7WUFDaEIsU0FBUyxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENB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