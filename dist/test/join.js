"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const join_1 = require("../src/join");
const streamdash_1 = require("streamdash");
class Outer extends streamdash_1.Writable {
    constructor() {
        super(...arguments);
        this.out = [];
    }
    _write(thing, encoding, cb) {
        this.out.push(thing);
        cb();
    }
    get() {
        return this.out;
    }
}
function aReduce(f, acc, xs, next) {
    let myXs = xs.concat([]);
    let initiator = () => {
        if (myXs.length == 0) {
            return next(null, acc);
        }
        f(acc, myXs.shift(), (err, newAcc) => {
            if (err) {
                return next(err);
            }
            acc = newAcc;
            initiator();
        });
    };
    initiator();
}
ava_1.default.cb('Can find things in storage', function (tst) {
    let worker = (acc, x, next) => {
        acc.add(x, (e) => {
            next(null, acc);
        });
    };
    let items = [
        { name: "A", type: "Letter" },
        { name: "B", type: "Letter" },
        { name: "C", type: "Letter" }
    ];
    let initial = new join_1.MemoryJoinStorage();
    aReduce(worker, initial, items, (e, storage) => {
        storage.find({ name: "B" }, (e, vs) => {
            tst.deepEqual(vs, [{ name: "B", type: "Letter" }]);
            tst.end();
        });
    });
});
const ORDER = "order";
const CUSTOMER = "customer";
function getJoin() {
    let input = [
        { customerId: "A", type: "order", item: "Shoe" },
        { type: "customer", id: "A", name: "Jack" },
        { customerId: "B", type: "order", item: "Ruler" },
        { type: "customer", id: "B", name: "Jane" },
        { customerId: "A", type: "order", item: "Car" },
    ];
    let src = new streamdash_1.ArrayReadable(input);
    let isLeft = (t) => {
        if (t.type == CUSTOMER) {
            return join_1.LeftOrRight.Left;
        }
        return join_1.LeftOrRight.Right;
    };
    let qb = (t) => {
        if (t.type == CUSTOMER) {
            return {
                lQry: { id: t.id },
                rQry: { customerId: t.id }
            };
        }
        return {
            lQry: { id: t.customerId },
            rQry: { customerId: t.customerId }
        };
    };
    let jt = new join_1.JoinTransform(isLeft, qb, qb, { objectMode: true });
    src.pipe(jt);
    return jt;
}
ava_1.default.cb('Can join', function (tst) {
    let jt = getJoin();
    let dst = new Outer({ objectMode: true });
    let expected = [
        { l: [], r: [{ customerId: "A", type: "order", item: "Shoe" }] },
        {
            l: [{ type: "customer", id: "A", name: "Jack" }],
            r: [{ customerId: "A", type: "order", item: "Shoe" }]
        },
        { l: [], r: [{ customerId: "B", type: "order", item: "Ruler" }] },
        {
            l: [{ type: "customer", id: "B", name: "Jane" }],
            r: [{ customerId: "B", type: "order", item: "Ruler" }]
        },
        {
            l: [{ type: "customer", id: "A", name: "Jack" }],
            r: [
                { customerId: "A", type: "order", item: "Shoe" },
                { customerId: "A", type: "order", item: "Car" }
            ]
        }
    ];
    jt.pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), expected);
        tst.end();
    });
});
ava_1.default.cb('Can get as inner join', function (tst) {
    let jt = getJoin();
    let expected = [
        { customerId: "A", name: "Jack", item: "Shoe" },
        { customerId: "B", name: "Jane", item: "Ruler" },
        { customerId: "A", name: "Jack", item: "Car" }
    ];
    let customerIdGenerator = (c) => c.id;
    let itemIdGenerator = (i) => `${i.customerId}:${i.item}`;
    let makeOrder = new join_1.InnerJoinTransform((l, r) => {
        return { customerId: l.id, name: l.name, item: r.item };
    }, (o) => `${o.customerId}:${o.item}`, { objectMode: true });
    let dst = new Outer({ objectMode: true });
    jt.pipe(makeOrder).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), expected);
        tst.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUF1QjtBQUV2QixzQ0FBcUo7QUFDckosMkNBQThMO0FBSzlMLFdBQWUsU0FBUSxxQkFBVztJQUFsQzs7UUFDWSxRQUFHLEdBQVEsRUFBRSxDQUFDO0lBUTFCLENBQUM7SUFQRyxNQUFNLENBQUMsS0FBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUNELEdBQUc7UUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0NBQ0o7QUFFRCxpQkFBdUIsQ0FBMkMsRUFBRSxHQUFNLEVBQUUsRUFBTyxFQUFFLElBQWlCO0lBQ2xHLElBQUksSUFBSSxHQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsSUFBSSxTQUFTLEdBQUc7UUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLEdBQUcsRUFBSyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTTtZQUNoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQzlCLEdBQUcsR0FBTSxNQUFNLENBQUM7WUFDaEIsU0FBUyxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7SUFFRixTQUFTLEVBQUUsQ0FB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