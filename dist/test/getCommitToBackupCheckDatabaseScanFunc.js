"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const getCommitToBackupCheckDatabaseScanFunc_1 = require("../src/getCommitToBackupCheckDatabaseScanFunc");
const Types_1 = require("../src/Types");
const ramda_1 = require("ramda");
ava_1.default.cb("Can buildCheckDatabase", (tst) => {
    let backupRecords = [
        { filePartByteCountThreshold: 1024, gpgKey: 'g', sha256: 'ef2', operation: Types_1.Operation.Create, fileByteCount: 58, modifiedDate: new Date('2017-06-24T10:46:12.432Z'), path: 'error_command', part: [1, 1] },
        { filePartByteCountThreshold: 1024, gpgKey: 'g', sha256: '8cf', operation: Types_1.Operation.Create, fileByteCount: 29, modifiedDate: new Date('2017-06-25T14:47:13.856Z'), path: 'hello_command', part: [3, 3] },
        { filePartByteCountThreshold: 1024, gpgKey: 'g', sha256: '999', operation: Types_1.Operation.Create, fileByteCount: 33, modifiedDate: new Date('2017-06-25T14:47:13.856Z'), path: 'other_command', part: [2, 3] },
        { filePartByteCountThreshold: 1024, gpgKey: 'g', sha256: 'def', operation: Types_1.Operation.Create, fileByteCount: 1816, modifiedDate: new Date('2017-06-19T06:20:05.168Z'), path: 'my-projects/getTLIdEncoderDecoder.md', part: [1, 1] }
    ], input = {
        gpgKey: 'gg',
        clientId: 'fozz',
        createdAt: new Date('2017-07-22T17:02:48.966Z'),
        commitId: 'rusdc000',
        record: backupRecords
    }, expected = {
        'error_command': { sha256: 'ef2', modifiedDate: new Date('2017-06-24T10:46:12.432Z'), fileByteCount: 58 },
        'hello_command': { sha256: '8cf', modifiedDate: new Date('2017-06-25T14:47:13.856Z'), fileByteCount: 29 },
        'my-projects/getTLIdEncoderDecoder.md': { sha256: 'def', modifiedDate: new Date('2017-06-19T06:20:05.168Z'), fileByteCount: 1816 }
    };
    let scanFunc = getCommitToBackupCheckDatabaseScanFunc_1.default({});
    function serialize(data) {
        return ramda_1.mapObjIndexed((v) => {
            return ramda_1.merge(v, { modifiedDate: v.modifiedDate.toISOString() });
        }, data);
    }
    scanFunc({}, input, (err, db) => {
        tst.deepEqual(serialize(db), serialize(expected));
        tst.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q29tbWl0VG9CYWNrdXBDaGVja0RhdGFiYXNlU2NhbkZ1bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L2dldENvbW1pdFRvQmFja3VwQ2hlY2tEYXRhYmFzZVNjYW5GdW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQXVCO0FBQ3ZCLDBHQUFtRztBQUNuRyx3Q0FBd0g7QUFDeEgsaUNBQTZDO0FBRTdDLGFBQUksQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxHQUFHO0lBRWxDLElBQUksYUFBYSxHQUFtQjtRQUM1QixFQUFFLDBCQUEwQixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGlCQUFTLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDek0sRUFBRSwwQkFBMEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxpQkFBUyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ3pNLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsaUJBQVMsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUN6TSxFQUFFLDBCQUEwQixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGlCQUFTLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsSUFBSSxFQUFFLHNDQUFzQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtLQUNyTyxFQUNELEtBQUssR0FBVztRQUNaLE1BQU0sRUFBRSxJQUFJO1FBQ1osUUFBUSxFQUFFLE1BQU07UUFDaEIsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDO1FBQy9DLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE1BQU0sRUFBRSxhQUFhO0tBQ3hCLEVBQ0QsUUFBUSxHQUF3QjtRQUM1QixlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7UUFDekcsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1FBQ3pHLHNDQUFzQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFO0tBQ3JJLENBQUM7SUFFTixJQUFJLFFBQVEsR0FBRyxnREFBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUxRCxtQkFBbUIsSUFBeUI7UUFDeEMsTUFBTSxDQUFDLHFCQUFhLENBQ2hCLENBQUMsQ0FBMkI7WUFDeEIsTUFBTSxDQUFDLGFBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxFQUNELElBQUksQ0FDUCxDQUFDO0lBQ04sQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDeEIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQXNCLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMifQ==