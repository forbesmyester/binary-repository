#!/usr/bin/env node

let { realpathSync, existsSync, writeFileSync } = require('fs');
let { join } = require('path');
let { pathOr } = require('ramda');
let { ConfigFile, BASE_TLID_TIMESTAMP } = require('../dist/src/Types');
let { listExisting, listDownload, listUpload, upload, download, fetch, push } = require('../dist/src/process');

let yargs = require('yargs');
let mkdirp = require('mkdirp');
let getTlidEncoderDecoder = require('get_tlid_encoder_decoder');


let tLIdEncoderDecoder = getTlidEncoderDecoder(BASE_TLID_TIMESTAMP, 1);

function getTlId() { return tLIdEncoderDecoder.encode(); }

function validateEbakConfigurationPath(path) {
    return existsSync(path);
}

function resolve(performLcCheck, opts) {
    let {_: [command], detail, quiet, local, 'local-config': lc, 'filepart-gpg-key': fpGpgKey, 'gpg-key': gpgKey} = opts;

    let path = local;
    if (!validateEbakConfigurationPath(path)) {
        throw new Error("'local' does not exist or is not initialized");
    }

    if (performLcCheck) {
        lc = lc ? lc : join(local, '.binary-repository');
        if (!validateEbakConfigurationPath(lc)) {
            throw new Error("'local-config' does not exist or is not initialized");
        }
    }

    return {
        detail,
        quiet,
        command,
        local,
        'local-config': lc
    };
}

yargs.usage('$0 <cmd> [args]')
    // .option('local', {
    //     describe: "The path you wish to backup / synchronize", type: 'string'
    // })
    .option('local-config', {
        describe: "Override config location [local].binary-repository",
        type: 'string'
    })
    .option('filepart-gpg-key', {
        describe: 'Override `gpg-key` when encrypting file data',
        type: 'string'
    })
    .option('quiet', {
        describe: 'Whether to run silently or not',
        type: 'boolean',
        default: false
    })
    .option('detail', {
        describe: 'Show details (in list-existing)',
        type: 'boolean',
        default: false
    })
    .option('gpg-key', {
        describe: 'Encryption key for data',
        type: 'string'
    })
    .option('client-id', { describe: 'Unique name to help identify this client', type: 'string' })
    .option('remote', { describe: 'Where you want to upload your encrypted data', type: 'string' })
    .command(
        'init [local]', 'Initalizes',
        {
            local: { require: true },
            'gpg-key': { require: true },
            'client-id': { require: true },
            remote: { require: true },
        },
        function init({ quiet, local, remote, 'client-id': clientId, 'filepart-gpg-key': fpGpgKey, 'gpg-key': gpgKey, 'local-config': lc}) {
            let p = lc ? lc : join(local, '.binary-repository');

            if (existsSync(p)) {
                console.info(`FATAL ERROR: path '${p}' already exists`);
                process.exit(1);
            }

            fpGpgKey = fpGpgKey ? fpGpgKey : gpgKey;

            mkdirp(p, (err) => {

                if (err) {
                    console.info(`FATAL ERROR: path '${p}' could not be created`);
                    process.exit(1);
                }

                let cfg = {
                    local,
                    remote,
                    'client-id': clientId,
                    'gpg-key': gpgKey,
                    'filepart-gpg-key': fpGpgKey
                };

                let file = join(p, 'config');

                writeFileSync(
                    file,
                    JSON.stringify(cfg),
                    { encoding: 'utf8' }
                );
                if (!quiet) {
                    console.log(`SUCCESS: path '${local}' has been initialized ` +
                        `with config stored in ${file}`);
                }
            });
        }
    )
    .command(
        'list-download [local]', 'Lists what `download` would download',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                listDownload(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'list-existing [local]', 'Lists what is known to be stored.',
        { local: { require: true }, detail: {} },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, detail } = resolve(true, args);
                listExisting(local, localConfiguration, { detail });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'list-upload [local]', 'Lists what `upload` would upload',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                listUpload(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'upload [local]', 'Uploads contents, but not metadata',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                upload(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'push [local]', 'Uploads metadata about previous `upload`',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                push(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'fetch [local]', 'Syncronize with remote data',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                fetch(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .command(
        'download [local]', 'Download remote data',
        { local: { require: true } },
        function (args) {
            try {
                let { local, 'local-config': localConfiguration, quiet } = resolve(true, args);
                download(local, localConfiguration, { quiet });
            } catch (e) { console.log(e.message); process.exit(1) }
        }
    )
    .demandCommand(1, "You must specify a sub-command")
    .check(o => resolve(false, o))
    .strict()
    .version()
    .help()
    .argv;


